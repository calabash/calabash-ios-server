variables:
  # `AzurePublishWhen` variable points to the matrix case that will be the main case
  # it will run `appcenter-cli` test step and publish artifacts to the Azure Blob
  AzurePublishWhen: 'BigSur-Xcode-13.0'

trigger:
  tags:
    include:
    - '*'
  branches:
    include:
    - master
    - develop
pr:
  branches:
    include:
    - master
    - develop

jobs:

- job:
  strategy:
    matrix:
      BigSur-Xcode-12.5:
        IMAGE_POOL: 'macOS-11'
        XCODE_VERSION: '12.5.1'
      BigSur-Xcode-13.0:
        IMAGE_POOL: 'macOS-11'
        XCODE_VERSION: '13.0'
  timeoutInMinutes: 180
  pool:
    vmImage: $(IMAGE_POOL)
  variables:
  - group: XTCRunTimeArtifactsCI

  steps:

  - script: |
      set -e
      sudo xcode-select --switch "/Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer"
      echo "Xcode version: $(xcrun xcodebuild -version)"
      echo "Xcode path: $(xcrun -f xcodebuild)"
      echo "Xcode select path: $(xcode-select --print-path)"
    displayName: "Select Xcode $(XCODE_VERSION)"

  - script: |
      set -e
      ruby -v
      echo -e "install: --no-document --env-shebang\nupdate:  --no-document --env-shebang" > ~/.gemrc
      bundle install
    displayName: "Prepare Ruby Environment"

  - script: brew install tree
    displayName: "Install brew dependencies"

  - script: |
      set -e
      git clone https://$(CalabashKeychainGitHubAccessToken)@github.com/xamarinhq/calabash-codesign.git
      calabash-codesign/apple/create-keychain.sh
    displayName: "Download and install keychain"

  - script: make framework
    displayName: "Make framework"

  - script: make xcframework
    displayName: "Make xcframework"

  - script: make dylibs
    displayName: "Make dylibs"

  - script: MAKE_FRAMEWORK=0 make ipa-cal
    displayName: "Make ipa-call"

  - script: MAKE_FRAMEWORK=0 make app-cal
    displayName: "Make app-call"

  - script: bundle exec bin/test/xctest.rb
    displayName: "Make xctests"
    condition: and(succeeded(), eq(variables['isRunXCTests'], 'true'))

  - script: bundle exec bin/ci/jenkins/appcenter.sh
    displayName: "test appcenter"
    condition: and(succeeded(), eq(variables['Agent.JobName'], variables['mainJob']))

  - script: bundle exec bin/test/cucumber.rb
    displayName: "exec cucumber"
    condition: and(succeeded(), eq(variables['isRunCucumberTests'], 'true'))

  # azureStorage* env vars are defined in the pipeline UI as secret variables
  - bash: "./bin/ci/az-publish.sh"
    env:
      AZURE_STORAGE_ACCOUNT: $(azureStorageAccount)
      AZURE_STORAGE_KEY: $(azureStorageKey)
      AZURE_STORAGE_CONNECTION_STRING: $(azureStorageConnectionString)
      SOURCE_BRANCH: $(Build.SourceBranch)
    displayName: "Publish to Azure Blob Storage"
    condition: and(succeeded(), eq(variables['Agent.JobName'], variables['AzurePublishWhen']), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), startsWith(variables['Build.SourceBranch'], 'develop')))

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFiles: 'cucumber/reports/junit/*.xml'
    condition: always()
